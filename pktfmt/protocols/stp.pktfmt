%%
#![allow(missing_docs)]
#![allow(unused_parens)]

use crate::traits::*;
use crate::cursors::*;
use crate::ether::EtherAddr;

use super::{StpType, StpVersion};
%%

packet StpTcnBpdu {
    header = [
        proto_id = Field {bit = 16, default=@0x00},
        version = Field {bit = 8, arg = %%StpVersion%%, default=@0x0},
        type_ = Field {bit = 8, arg = %%StpType%%, default=@0x80},
    ],
    cond = (version==0) && (type_==0x80)
}

packet StpConfBpdu {
    header = [
        proto_id = Field {bit = 16, default=@0x00},
        version = Field {bit = 8, arg = %%StpVersion%%, default=@0x0},
        type_ = Field {bit = 8, arg = %%StpType%%, default=@0x0},
        flag = Field {bit = 8},
        root_priority = Field {bit = 4, gen = false},
        root_sys_id_ext = Field {bit = 12},
        root_mac_addr = Field {bit = 48, repr = &[u8], arg = %%EtherAddr%%},
        path_cost = Field {bit = 32},        
        bridge_priority = Field {bit = 4, gen=false},
        bridge_sys_id_ext = Field {bit = 12},
        bridge_mac_addr = Field {bit = 48, repr = &[u8], arg = %%EtherAddr%%},
        port_id = Field {bit = 16},
        msg_age = Field {bit = 16, gen=false},
        max_age = Field {bit = 16, gen=false},
        hello_time = Field {bit = 16, gen=false},
        forward_delay = Field {bit = 16, gen=false}
    ],
    cond = (version==0) && (type_==0)
}

%%
impl<T: Buf> StpConfBpdu<T> {
    /// Get the root id priority from the `StpConfBpdu`.
    ///
    /// Note: the result is a a multiple of 4096.
    #[inline]
    pub fn root_priority(&self) -> u16 {
        ((self.buf.chunk()[5] >> 4) as u16) << 12
    }

    /// Get the root id as `u64`.
    #[inline]
    pub fn root_id(&self) -> u64 {
        u64::from_be_bytes((&self.buf.chunk()[5..13]).try_into().unwrap())
    }

    /// Get the bridge id priority from the `StpConfBpdu`.
    ///
    /// Note: the result is a a multiple of 4096.
    #[inline]
    pub fn bridge_priority(&self) -> u16 {
        ((self.buf.chunk()[17] >> 4) as u16) << 12
    }

    /// Get the bridge id as `u64`.
    #[inline]
    pub fn bridge_id(&self) -> u64 {
        u64::from_be_bytes((&self.buf.chunk()[17..25]).try_into().unwrap())
    }

    #[inline]
    pub fn msg_age(&self) -> u16 {
        u16::from_le_bytes((&self.buf.chunk()[27..29]).try_into().unwrap())
    }
    
    #[inline]
    pub fn max_age(&self) -> u16 {
        u16::from_le_bytes((&self.buf.chunk()[29..31]).try_into().unwrap())
    }
    
    #[inline]
    pub fn hello_time(&self) -> u16 {
        u16::from_le_bytes((&self.buf.chunk()[31..33]).try_into().unwrap())
    }
    
    #[inline]
    pub fn forward_delay(&self) -> u16 {
        u16::from_le_bytes((&self.buf.chunk()[33..35]).try_into().unwrap())
    }
}
impl<T: PktBufMut> StpConfBpdu<T> {
    /// Set the root priority for the `StpConfBpdu`.
    ///
    /// Note: the input `value` must be a multiple of 4096.
    ///
    /// # Panics
    ///
    /// The lower 12 bits of `value` is not all zero.
    #[inline]
    pub fn set_root_priority(&mut self, value: u16) {
        assert!(value & 0x0fff == 0);
        let value = (value >> 12) as u8;
        self.buf.chunk_mut()[5] = (self.buf.chunk_mut()[5] & 0x0f) | (value << 4);
    }

    /// Set the root id from `value`.
    #[inline]
    pub fn set_root_id(&mut self, value: u64) {
        (&mut self.buf.chunk_mut()[5..13]).copy_from_slice(&value.to_be_bytes());
    }

    /// Set the bridge priority for the `StpConfBpdu`.
    ///
    /// Note: the input `value` must be a multiple of 4096.
    ///
    /// # Panics
    ///
    /// The lower 12 bits of `value` is not all zero.
    #[inline]
    pub fn set_bridge_priority(&mut self, value: u16) {
        assert!(value & 0x0fff == 0);
        let value = (value >> 12) as u8;
        self.buf.chunk_mut()[17] = (self.buf.chunk_mut()[17] & 0x0f) | (value << 4);
    }

    /// Set the bridge id from `value`.
    #[inline]
    pub fn set_bridge_id(&mut self, value: u64) {
        (&mut self.buf.chunk_mut()[17..25]).copy_from_slice(&value.to_be_bytes());
    }

    #[inline]
    pub fn set_msg_age(&mut self, value: u16) {
        (&mut self.buf.chunk_mut()[27..29]).copy_from_slice(&value.to_le_bytes());
    }

    #[inline]
    pub fn set_max_age(&mut self, value: u16) {
        (&mut self.buf.chunk_mut()[29..31]).copy_from_slice(&value.to_le_bytes());
    }

    #[inline]
    pub fn set_hello_time(&mut self, value: u16) {
        (&mut self.buf.chunk_mut()[31..33]).copy_from_slice(&value.to_le_bytes());
    }
    
    #[inline]
    pub fn set_forward_delay(&mut self, value: u16) {
        (&mut self.buf.chunk_mut()[33..35]).copy_from_slice(&value.to_le_bytes());
    }
}
%%

packet RstpConfBpdu {
    header = [
        proto_id = Field {bit = 16, default=@0x00},
        version = Field {bit = 8, arg = %%StpVersion%%, default=@0x2},
        type_ = Field {bit = 8, arg = %%StpType%%, default=@0x2},
        flag = Field {bit = 8},
        root_priority = Field {bit = 4, gen = false},
        root_sys_id_ext = Field {bit = 12},
        root_mac_addr = Field {bit = 48, repr = &[u8], arg = %%EtherAddr%%},
        path_cost = Field {bit = 32},        
        bridge_priority = Field {bit = 4, gen=false},
        bridge_sys_id_ext = Field {bit = 12},
        bridge_mac_addr = Field {bit = 48, repr = &[u8], arg = %%EtherAddr%%},
        port_id = Field {bit = 16},
        msg_age = Field {bit = 16, gen=false},
        max_age = Field {bit = 16, gen=false},
        hello_time = Field {bit = 16, gen=false},
        forward_delay = Field {bit = 16, gen=false},
        version1_len = Field {bit=8}
    ],
    cond = (version==2) && (type_==2)
}

%%
impl<T: Buf> RstpConfBpdu<T> {
    /// Get the root id priority from the `RstpConfBpdu`.
    ///
    /// Note: the result is a a multiple of 4096.
    #[inline]
    pub fn root_priority(&self) -> u16 {
        ((self.buf.chunk()[5] >> 4) as u16) << 12
    }

    /// Get the root id as `u64`.
    #[inline]
    pub fn root_id(&self) -> u64 {
        u64::from_be_bytes((&self.buf.chunk()[5..13]).try_into().unwrap())
    }

    /// Get the bridge id priority from the `RstpConfBpdu`.
    ///
    /// Note: the result is a a multiple of 4096.
    #[inline]
    pub fn bridge_priority(&self) -> u16 {
        ((self.buf.chunk()[17] >> 4) as u16) << 12
    }

    /// Get the bridge id as `u64`.
    #[inline]
    pub fn bridge_id(&self) -> u64 {
        u64::from_be_bytes((&self.buf.chunk()[17..25]).try_into().unwrap())
    }

    #[inline]
    pub fn msg_age(&self) -> u16 {
        u16::from_le_bytes((&self.buf.chunk()[27..29]).try_into().unwrap())
    }

    #[inline]
    pub fn max_age(&self) -> u16 {
        u16::from_le_bytes((&self.buf.chunk()[29..31]).try_into().unwrap())
    }

    #[inline]
    pub fn hello_time(&self) -> u16 {
        u16::from_le_bytes((&self.buf.chunk()[31..33]).try_into().unwrap())
    }

    #[inline]
    pub fn forward_delay(&self) -> u16 {
        u16::from_le_bytes((&self.buf.chunk()[33..35]).try_into().unwrap())
    }
}
impl<T: PktBufMut> RstpConfBpdu<T> {
    /// Set the root priority for the `RstpConfBpdu`.
    ///
    /// Note: the input `value` must be a multiple of 4096.
    ///
    /// # Panics
    ///
    /// The lower 12 bits of `value` is not all zero.
    #[inline]
    pub fn set_root_priority(&mut self, value: u16) {
        assert!(value & 0x0fff == 0);
        let value = (value >> 12) as u8;
        self.buf.chunk_mut()[5] = (self.buf.chunk_mut()[5] & 0x0f) | (value << 4);
    }

    /// Set the root id from `value`.
    #[inline]
    pub fn set_root_id(&mut self, value: u64) {
        (&mut self.buf.chunk_mut()[5..13]).copy_from_slice(&value.to_be_bytes());
    }

    /// Set the bridge priority for the `RstpConfBpduMessage`.
    ///
    /// Note: the input `value` must be a multiple of 4096.
    ///
    /// # Panics
    ///
    /// The lower 12 bits of `value` is not all zero.
    #[inline]
    pub fn set_bridge_priority(&mut self, value: u16) {
        assert!(value & 0x0fff == 0);
        let value = (value >> 12) as u8;
        self.buf.chunk_mut()[17] = (self.buf.chunk_mut()[17] & 0x0f) | (value << 4);
    }

    /// Set the bridge id from `value`.
    #[inline]
    pub fn set_bridge_id(&mut self, value: u64) {
        (&mut self.buf.chunk_mut()[17..25]).copy_from_slice(&value.to_be_bytes());
    }

    #[inline]
    pub fn set_msg_age(&mut self, value: u16) {
        (&mut self.buf.chunk_mut()[27..29]).copy_from_slice(&value.to_le_bytes());
    }

    #[inline]
    pub fn set_max_age(&mut self, value: u16) {
        (&mut self.buf.chunk_mut()[29..31]).copy_from_slice(&value.to_le_bytes());
    }

    #[inline]
    pub fn set_hello_time(&mut self, value: u16) {
        (&mut self.buf.chunk_mut()[31..33]).copy_from_slice(&value.to_le_bytes());
    }
    
    #[inline]
    pub fn set_forward_delay(&mut self, value: u16) {
        (&mut self.buf.chunk_mut()[33..35]).copy_from_slice(&value.to_le_bytes());
    }
}
%%

packet MstpConfBpdu {
    header = [
        proto_id = Field {bit = 16, default=@0x00},
        version = Field {bit = 8, arg = %%StpVersion%%, default=@0x3},
        type_ = Field {bit = 8, arg = %%StpType%%, default=@0x2},
        flag = Field {bit = 8},
        root_priority = Field {bit = 4, gen = false},
        root_sys_id_ext = Field {bit = 12},
        root_mac_addr = Field {bit = 48, repr = &[u8], arg = %%EtherAddr%%},
        path_cost = Field {bit = 32},        
        bridge_priority = Field {bit = 4, gen=false},
        bridge_sys_id_ext = Field {bit = 12},
        bridge_mac_addr = Field {bit = 48, repr = &[u8], arg = %%EtherAddr%%},
        port_id = Field {bit = 16},
        msg_age = Field {bit = 16, gen=false},
        max_age = Field {bit = 16, gen=false},
        hello_time = Field {bit = 16, gen=false},
        forward_delay = Field {bit = 16, gen=false},
        version1_len = Field {bit=8},
        version3_len = Field {bit = 16, default=64, gen=false},
        mst_config_format_selector = Field {bit = 8},
        mst_config_name = Field {bit = 256, repr=&[u8]},
        mst_config_revision = Field {bit = 16},
        mst_config_digest = Field {bit = 128, repr=&[u8]},
        irpc = Field {bit = 32},
        cist_bridge_priority = Field {bit = 4, gen = false},
        cist_bridge_sys_id_ext = Field {bit = 12},
        cist_bridge_mac_addr = Field {bit = 48, repr = &[u8], arg = %%EtherAddr%%},
        remain_id = Field {bit = 8}
    ],
    length = [
        header_len = version3_len + 38,
    ],
    cond = (version==3) && (type_==2)
}

%%
impl<T: Buf> MstpConfBpdu<T> {
    /// Get the **version3_len** field value.
    #[inline]
    pub fn version3_len(&self) -> u16 {
        u16::from_be_bytes((&self.buf.chunk()[36..38]).try_into().unwrap())
    }

    /// Get the root id priority from the `MstpConfBpdu`.
    ///
    /// Note: the result is a a multiple of 4096.
    #[inline]
    pub fn root_priority(&self) -> u16 {
        ((self.buf.chunk()[5] >> 4) as u16) << 12
    }

    /// Get the root id as `u64`.
    #[inline]
    pub fn root_id(&self) -> u64 {
        u64::from_be_bytes((&self.buf.chunk()[5..13]).try_into().unwrap())
    }

    /// Get the bridge id priority from the `MstpConfBpdu`.
    ///
    /// Note: the result is a a multiple of 4096.
    #[inline]
    pub fn bridge_priority(&self) -> u16 {
        ((self.buf.chunk()[17] >> 4) as u16) << 12
    }

    /// Get the bridge id as `u64`.
    #[inline]
    pub fn bridge_id(&self) -> u64 {
        u64::from_be_bytes((&self.buf.chunk()[17..25]).try_into().unwrap())
    }

    /// Get the cist bridge id priority from the `MstpConfBpdu`.
    ///
    /// Note: the result is a a multiple of 4096.
    #[inline]
    pub fn cist_bridge_priority(&self) -> u16 {
        ((self.buf.chunk()[93] >> 4) as u16) << 12
    }

    /// Get the cist bridge id as `u64`.
    #[inline]
    pub fn cist_bridge_id(&self) -> u64 {
        u64::from_be_bytes((&self.buf.chunk()[93..101]).try_into().unwrap())
    }

    /// Get the number of the `MstiConfMessage` contained in the
    /// `MstpConfBpdu`.
    ///
    /// This method returns `None` if the `MstpConfBpdu` has an invalid
    /// format.
    #[inline]
    pub fn num_of_msti_msg(&self) -> Option<usize> {
        if (self.header_len() - 102) % 16 != 0 {
            None
        } else {
            Some(((self.header_len() - 102) / 16) as usize)
        }
    }

    /// Get the `index`-th `MstiConf` from the `MstpConfBpdu`.
    ///
    /// # Panics
    ///
    /// This method panics if `MstpConfBpdu` does not have the `index`-th
    /// `MstiConf`.
    #[inline]
    pub fn msti_conf(&self, index: usize) -> MstiConf<Cursor<'_>> {
        let offset = 16 * index;
        MstiConf::parse_unchecked(Cursor::new(&self.buf.chunk()[102 + offset..118 + offset]))
    }

    #[inline]
    pub fn msg_age(&self) -> u16 {
        u16::from_le_bytes((&self.buf.chunk()[27..29]).try_into().unwrap())
    }

    #[inline]
    pub fn max_age(&self) -> u16 {
        u16::from_le_bytes((&self.buf.chunk()[29..31]).try_into().unwrap())
    }

    #[inline]
    pub fn hello_time(&self) -> u16 {
        u16::from_le_bytes((&self.buf.chunk()[31..33]).try_into().unwrap())
    }

    #[inline]
    pub fn forward_delay(&self) -> u16 {
        u16::from_le_bytes((&self.buf.chunk()[33..35]).try_into().unwrap())
    }
}
impl<T: PktBufMut> MstpConfBpdu<T> {
    /// Set the root priority for the `MstpConfBpdu`.
    ///
    /// Note: the input `value` must be a multiple of 4096.
    ///
    /// # Panics
    ///
    /// The lower 12 bits of `value` is not all zero.
    #[inline]
    pub fn set_root_priority(&mut self, value: u16) {
        assert!(value & 0x0fff == 0);
        let value = (value >> 12) as u8;
        self.buf.chunk_mut()[5] = (self.buf.chunk_mut()[5] & 0x0f) | (value << 4);
    }

    /// Set the root id from `value`.
    #[inline]
    pub fn set_root_id(&mut self, value: u64) {
        (&mut self.buf.chunk_mut()[5..13]).copy_from_slice(&value.to_be_bytes());
    }

    /// Set the bridge priority for the `MstpConfBpdu`.
    ///
    /// Note: the input `value` must be a multiple of 4096.
    ///
    /// # Panics
    ///
    /// The lower 12 bits of `value` is not all zero.
    #[inline]
    pub fn set_bridge_priority(&mut self, value: u16) {
        assert!(value & 0x0fff == 0);
        let value = (value >> 12) as u8;
        self.buf.chunk_mut()[17] = (self.buf.chunk_mut()[17] & 0x0f) | (value << 4);
    }

    /// Set the bridge id from `value`.
    #[inline]
    pub fn set_bridge_id(&mut self, value: u64) {
        (&mut self.buf.chunk_mut()[17..25]).copy_from_slice(&value.to_be_bytes());
    }

    /// Set the cist bridge id priority for the `MstpConfBpdu`.
    ///
    /// Note: the input `value` must be a multiple of 4096.
    ///
    /// # Panics
    ///
    /// The lower 12 bits of `value` is not all zero.
    #[inline]
    pub fn set_cist_bridge_priority(&mut self, value: u16) {
        assert!(value & 0x0fff == 0);
        let value = (value >> 12) as u8;
        self.buf.chunk_mut()[93] = (self.buf.chunk_mut()[93] & 0x0f) | (value << 4);
    }

    /// Set the cist bridge id from `value`.
    #[inline]
    pub fn set_cist_bridge_id(&mut self, value: u64) {
        (&mut self.buf.chunk_mut()[93..101]).copy_from_slice(&value.to_be_bytes());
    }

    /// Set the number of the `MstiConf` contained in the
    /// `MstpConfBpdu`.
    #[inline]
    pub fn set_num_of_msti_msg(&mut self, num: u32) {
        self.set_header_len(102 + num * 16);
    }

    /// Get the `index`-th mutable `MstiConf` from the
    /// `MstpConfBpdu`.
    ///
    /// # Panics
    ///
    /// This method panics if `MstpConfBpdu` does not have the `index`-th
    /// `MstiConf`.
    #[inline]
    pub fn msti_conf_message_mut(&mut self, index: usize) -> MstiConf<CursorMut<'_>> {
        let offset = 16 * index;
        MstiConf::parse_unchecked(CursorMut::new(&mut self.buf.chunk_mut()[102 + offset..118 + offset]))
    }

    #[inline]
    pub fn set_msg_age(&mut self, value: u16) {
        (&mut self.buf.chunk_mut()[27..29]).copy_from_slice(&value.to_le_bytes());
    }

    #[inline]
    pub fn set_max_age(&mut self, value: u16) {
        (&mut self.buf.chunk_mut()[29..31]).copy_from_slice(&value.to_le_bytes());
    }

    #[inline]
    pub fn set_hello_time(&mut self, value: u16) {
        (&mut self.buf.chunk_mut()[31..33]).copy_from_slice(&value.to_le_bytes());
    }

    #[inline]
    pub fn set_forward_delay(&mut self, value: u16) {
        (&mut self.buf.chunk_mut()[33..35]).copy_from_slice(&value.to_le_bytes());
    }
}
%%

packet MstiConf {
    header = [
        flags = Field {bit = 8},
        regional_root_priority = Field {bit = 4, gen = false},
        regional_root_sys_id_ext = Field {bit = 12},
        regional_root_mac_addr = Field {bit = 48, repr = &[u8], arg = %%EtherAddr%%},
        path_cost = Field {bit = 32},
        bridge_priority = Field {bit = 8},
        port_priority = Field {bit = 8},
        remaining_hops = Field {bit = 8},
    ]
}

%%
impl<T: Buf> MstiConf<T> {
    /// Get the regional root id priority from the `MstiConf`.
    ///
    /// Note: the result is a a multiple of 4096.
    #[inline]
    pub fn regional_root_priority(&self) -> u16 {
        ((self.buf.chunk()[1] >> 4) as u16) << 12
    }

    /// Get the regional root id as `u64`.
    #[inline]
    pub fn regional_root_id(&self) -> u64 {
        u64::from_be_bytes((&self.buf.chunk()[1..9]).try_into().unwrap())
    }
}

impl<T: PktBufMut> MstiConf<T> {
    /// Set the regional root id priority for the `MstiConf`.
    ///
    /// Note: the input `value` must be a multiple of 4096.
    ///
    /// # Panics
    ///
    /// The lower 12 bits of `value` is not all zero.
    #[inline]
    pub fn set_regional_root_priority(&mut self, value: u16) {
        assert!(value & 0x0fff == 0);
        let value = (value >> 12) as u8;
        self.buf.chunk_mut()[1] = (self.buf.chunk_mut()[1] & 0x0f) | (value << 4);
    }

    /// Set the regional root id from `value`. 
    #[inline]
    pub fn set_regional_root_id(&mut self, value: u64) {
        (&mut self.buf.chunk_mut()[1..9]).copy_from_slice(&value.to_be_bytes());
    }
}
%%

group StpGroup = {
    members = [
        StpTcnBpdu,
        StpConfBpdu,
        RstpConfBpdu,
        MstpConfBpdu,
    ]
}