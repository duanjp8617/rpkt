%%
#![allow(missing_docs)]
#![allow(unused_parens)]

use super::{IpProtocol, Ipv4Addr};
use crate::{Buf, PktBuf, PktBufMut};
use crate::{Cursor, CursorMut};
%%

packet Ipv4 {
    header = [
        version = Field{bit = 4, default = @4},
        data_off = Field{bit = 4, default = 5, gen = false},
        dscp = Field{bit = 6},
        ecn = Field{bit = 2},
        packet_len_ = Field {bit = 16, default = 20, gen = false},
        ident = Field {bit = 16},
        flag_reserved = Field{bit = 1},
        dont_frag = Field{bit = 1, arg = bool},
        more_frag = Field{bit = 1, arg = bool},
        frag_offset = Field{bit = 13},
        ttl = Field{bit = 8},
        protocol = Field{bit = 8, arg = %%IpProtocol%%},
        checksum = Field{bit = 16},
        src_addr = Field{bit = 32, arg = %%Ipv4Addr%%},
        dst_addr = Field{bit = 32, arg = %%Ipv4Addr%%},
    ],
    length = [
        header_len = data_off*4,
        packet_len = packet_len_
    ]
}

%%
/*
impl<T: Buf> Ipv4Packet<T> {
    #[inline]
    pub fn src_ip(&self) -> Ipv4Addr {
        Ipv4Addr::new(
            self.buf.chunk()[12],
            self.buf.chunk()[13],
            self.buf.chunk()[14],
            self.buf.chunk()[15],
        )
    }
    #[inline]
    pub fn dst_ip(&self) -> Ipv4Addr {
        Ipv4Addr::new(
            self.buf.chunk()[16],
            self.buf.chunk()[17],
            self.buf.chunk()[18],
            self.buf.chunk()[19],
        )
    }
}
impl<T: PktBufMut> Ipv4Packet<T> {
    #[inline]
    pub fn set_src_ip(&mut self, value: Ipv4Addr) {
        (&mut self.buf.chunk_mut()[12..16]).copy_from_slice(&value.octets());
    }
    #[inline]
    pub fn set_dst_ip(&mut self, value: Ipv4Addr) {
        (&mut self.buf.chunk_mut()[16..20]).copy_from_slice(&value.octets());
    }
}
*/
%%

packet Eol {
    header = [
        type_ = Field {bit = 8, default = @0},
    ],
    cond = (type_ == 0),
}

packet NopOption {
    header = [
        type_ = Field {bit = 8, default = @1},
    ],
    cond = (type_ == 1),
}

packet TimestampOption {
    header = [
        type_ = Field {bit = 8, default = @68},
        len = Field {
            bit = 8,
            default = 4,
            gen = false,
        },
        pointer = Field {bit = 8, default = 5},
        oflw = Field {bit = 4}, 
        flg = Field {bit = 4},
    ],
    length = [
        header_len=len
    ],
    cond = (type_ == 68)
}

packet RecordRouteOption {
    header = [
        type_ = Field {bit = 8, default = @7},
        len = Field {
            bit = 8,
            default = 3,
            gen = false,
        },
        pointer = Field {bit = 8, default = 4},
    ],
    length = [
        header_len=len
    ],
    cond = (type_ == 7),
}

// A legacy option defined in 
// https://www.ietf.org/archive/id/draft-ietf-cipso-ipsecurity-01.txt
packet CommercialSecurity {
    header = [
        type_ = Field {bit = 8, default = @134},
        len = Field {
            bit = 8,
            default = 6,
            gen = false,
        },
        doi = Field {bit = 32},
    ],
    length = [
        header_len=len
    ],
    cond = (type_ == 134),
}

packet CommercialSecurityTag {
    header = [
        tag_type = Field{bit = 8},
        len = Field {
            bit = 8, default = 4, gen = false,
        },
        alignment_octet = Field{bit = 8, default=@0},
        sensitivity_level = Field{bit = 8}
    ]
    ,
    length = [
        header_len=len
    ]
}

packet RouteAlertOption {
    header = [
        type_ = Field {bit = 8, default = @148},
        len = Field {
            bit = 8,            
            default = @4,
            gen = false,
        },
        data = Field{bit = 16}
    ],
    length = [
        header_len=len
    ],
    cond = (type_ == 148),
}

group Ipv4Options = {
    members = [
        Eol,
        NopOption,
        TimestampOption,
        RecordRouteOption,
        RouteAlertOption,
        CommercialSecurity
    ],
    enable_iter = true,
}