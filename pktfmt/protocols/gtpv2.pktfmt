%%
#![allow(missing_docs)]
#![allow(unused_parens)]

use crate::cursors::*;
use crate::endian::{read_uint_from_be_bytes, write_uint_as_be_bytes};
use crate::traits::*;
%%

// Defined according to TS 129 274.
packet Gtpv2 {
    header = [
        version = Field{bit = 3, default=@2},
        piggybacking_flag = Field{bit = 1, arg = bool},
        teid_present = Field{bit = 1, arg = bool},
        message_priority_present = Field{bit = 1, arg = bool},
        spare=Field{bit = 2},
        message_type = Field{bit = 8},
        message_len = Field{bit = 16, default=4, gen=false},
    ],
    length = [
        header_len=,
        packet_len = message_len + 4
    ]
}

%%
impl<T: Buf> Gtpv2<T> {
    /// A customized `header_len` function.
    /// The header length of Gtpv1 protocol is either 8 or 12 bytes, depending
    /// on the values of the sequence_present, extention_header_present and npdu_present
    /// flag bits.
    #[inline]
    pub fn header_len(&self) -> usize {
        if self.teid_present() {
            12
        } else {
            8
        }
    }

    /// Return the teid value.
    ///
    /// # Panics
    /// This function panics if:
    /// 1. `self.teid_present()` is false.
    /// 2. The packet buffer has invalid form.
    #[inline]
    pub fn teid(&self) -> u32 {
        assert!(self.teid_present());
        u32::from_be_bytes(self.buf.chunk()[4..8].try_into().unwrap())
    }

    /// Return the sequence number.
    ///
    /// # Panics:
    /// This function panics if:
    /// 1. The packet buffer has invalid form.
    #[inline]
    pub fn seq_number(&self) -> u32 {
        if self.teid_present() {
            read_uint_from_be_bytes(&self.buf.chunk()[8..11]) as u32
        } else {
            read_uint_from_be_bytes(&self.buf.chunk()[4..7]) as u32
        }
    }

    /// Return the message priority.
    ///
    /// # Panics
    /// This function panics if:
    /// 1. `self.teid_present()` and `self.message_priority_present()` are both false.
    /// 2. The packet buffer has invalid form.
    #[inline]
    pub fn message_priority(&self) -> u8 {
        assert!(self.teid_present() && self.message_priority_present());
        (self.buf.chunk()[11] & 0xf0) >> 4
    }

    /// Return the last spare field.
    ///
    /// # Panics:
    /// This function panics if:
    /// 1. The packet buffer has invalid form.
    #[inline]
    pub fn spare_last(&self) -> u8 {
        if self.teid_present() {
            if self.message_priority_present() {
                self.buf.chunk()[11] & 0x0f
            } else {
                self.buf.chunk()[11]
            }
        } else {
            self.buf.chunk()[7]
        }
    }
}

impl<T: PktBufMut> Gtpv2<T> {
    /// Set the teid value.
    ///
    /// # Panics
    /// This function panics if:
    /// 1. `self.teid_present()` is false.
    /// 2. The packet buffer has invalid form.
    #[inline]
    pub fn set_teid(&mut self, value: u32) {
        assert!(self.teid_present());
        self.buf.chunk_mut()[4..8].copy_from_slice(&value.to_be_bytes());
    }

    /// Set the sequence number.
    ///
    /// # Panics
    /// This function panics if:
    /// 1. `value` is no less than `(1 << 24)`.
    /// 2. The packet buffer has invalid form.
    #[inline]
    pub fn set_seq_number(&mut self, value: u32) {
        assert!(value < (1 << 24));
        if self.teid_present() {
            write_uint_as_be_bytes(&mut self.buf.chunk_mut()[8..11], value as u64);
        } else {
            write_uint_as_be_bytes(&mut self.buf.chunk_mut()[4..7], value as u64);
        }
    }

    /// Set the message priority.
    ///
    /// # Panics
    /// This function panics if:
    /// 1. `self.teid_present()` and `self.message_priority_present()` are
    /// both false, and that `value` is no less than `(1 << 4)`.
    /// 2. The packet buffer has invalid form.
    #[inline]
    pub fn set_message_priority(&mut self, value: u8) {
        assert!(self.teid_present() && self.message_priority_present() && value < 1 << 4);
        self.buf.chunk_mut()[11] = (self.buf.chunk_mut()[11] & 0x0f) | (value << 4);
    }

    /// Set the message priority.
    ///
    /// # Panics
    /// This function panics if:
    /// 1. `self.message_priority_present()` is true, and
    /// that `value` is no less than `(1 << 4)`.
    /// 2. The packet buffer has invalid form.
    #[inline]
    pub fn set_spare_last(&mut self, value: u8) {
        if self.teid_present() {
            if self.message_priority_present() {
                assert!(value < 1 << 4);
                self.buf.chunk_mut()[11] = (self.buf.chunk_mut()[11] & 0xf0) | value;
            } else {
                self.buf.chunk_mut()[11] = value;
            }
        } else {
            self.buf.chunk_mut()[7] = value;
        }
    }
}
%%

// imsi 1
packet InternationalMobileSubscriberIdIE {
    header = [
        type_ = Field{bit = 8, default=@1},
        len = Field{bit = 16, default = 0, gen = false},
        cr_flag = Field{bit = 4},
        instance = Field{bit = 4},
    ],
    length = [
        header_len = len + 4
    ],
    cond = (type_==1)
}

// recovery restart counter 3
packet RecoveryIE {
    header = [
        type_ = Field{bit = 8, default=@3},
        len = Field{bit = 16, default = 0, gen = false},
        cr_flag = Field{bit = 4},
        instance = Field{bit = 4},
    ],
    length = [
        header_len = len + 4
    ],
    cond = (type_==3)
}

// aggregate maximum bit rate 72
packet AggregateMaxBitRateIE {
    header = [
        type_ = Field{bit = 8, default=@72},
        len = Field{bit = 16, default = @8},
        cr_flag = Field{bit = 4},
        instance = Field{bit = 4},
        apn_ambr_for_uplink = Field{bit = 32},
        apn_ambr_for_downlink = Field{bit = 32},
    ],
    cond = (type_==72)
}

// 73
packet EpsBearerIdIE {
    header = [
        type_ = Field{bit = 8, default=@73},
        len = Field{bit = 16, default = @1},
        cr_flag = Field{bit = 4},
        instance = Field{bit = 4},
        spare = Field{bit = 4, default=@0},
        eps_bearer_id = Field{bit = 4}
    ],
    cond = (type_==73)
}

// mobile equipment identifty (MEI) 75
packet MobileEquipmentIdIE {
    header = [
        type_ = Field{bit = 8, default=@75},
        len = Field{bit = 16, default = 0, gen=false},
        cr_flag = Field{bit = 4},
        instance = Field{bit = 4},        
    ],
    length = [
        header_len = len+4
    ],
    cond = (type_==75)
}

// rat type 82
packet RatTypeIE {
    header = [
        type_ = Field{bit = 8, default=@82},
        len = Field{bit = 16, default = @1},
        cr_flag = Field{bit = 4},
        instance = Field{bit = 4},
        rat_type = Field{bit = 8},
    ],
    cond = (type_==82)
}

// serving network 83
packet ServingNetworkIE {
    header = [
        type_ = Field{bit = 8, default=@83},
        len = Field{bit = 16, default = @3},
        cr_flag = Field{bit = 4},
        instance = Field{bit = 4},
        mcc_digit2 = Field{bit = 4},
        mcc_digit1 = Field{bit = 4},
        mnc_digit3 = Field{bit = 4},
        mcc_digit3 = Field{bit = 4},
        mnc_digit2 = Field{bit = 4},
        mnc_digit1 = Field{bit = 4},
    ],
    cond = (type_==83)
}

// User location info 86
packet UserLocationInfoIE {
    header = [
        type_ = Field{bit = 8, default=@86},
        len = Field{bit = 16, default = 1, gen = false},
        cr_flag = Field{bit = 4},
        instance = Field{bit = 4},
        extended_macro_enodeb_id = Field{bit = 1, arg = bool},
        macro_enodeb_id = Field{bit = 1, arg = bool},
        lai = Field{bit = 1, arg = bool},
        ecgi = Field{bit = 1, arg = bool},
        tai = Field{bit = 1, arg = bool},
        rai = Field{bit = 1, arg = bool},
        sai = Field{bit = 1, arg = bool},
        cgi = Field{bit = 1, arg = bool},
    ],
    length = [
        header_len = len + 4
    ],
    cond = (type_==86)
}

packet UliCgi {
    header = [
        mcc2 = Field{bit = 4},
        mcc1 = Field{bit = 4},
        mnc3 = Field{bit = 4},
        mcc3 = Field{bit = 4},
        mnc2 = Field{bit = 4},
        mnc1 = Field{bit = 4},
        location_area_code = Field{bit = 16},
        cell_identity = Field{bit = 16}
    ]
}

packet UliSai {
    header = [
        mcc2 = Field{bit = 4},
        mcc1 = Field{bit = 4},
        mnc3 = Field{bit = 4},
        mcc3 = Field{bit = 4},
        mnc2 = Field{bit = 4},
        mnc1 = Field{bit = 4},
        location_area_code = Field{bit = 16},
        servie_area_code = Field{bit = 16}
    ]
}

packet UliRai {
    header = [
        mcc2 = Field{bit = 4},
        mcc1 = Field{bit = 4},
        mnc3 = Field{bit = 4},
        mcc3 = Field{bit = 4},
        mnc2 = Field{bit = 4},
        mnc1 = Field{bit = 4},
        location_area_code = Field{bit = 16},
        routing_area_code = Field{bit = 16}
    ]
}

packet UliTai {
    header = [
        mcc2 = Field{bit = 4},
        mcc1 = Field{bit = 4},
        mnc3 = Field{bit = 4},
        mcc3 = Field{bit = 4},
        mnc2 = Field{bit = 4},
        mnc1 = Field{bit = 4},        
        tracking_area_code = Field{bit = 16}
    ]
}

packet UliEcgi {
    header = [
        mcc2 = Field{bit = 4},
        mcc1 = Field{bit = 4},
        mnc3 = Field{bit = 4},
        mcc3 = Field{bit = 4},
        mnc2 = Field{bit = 4},
        mnc1 = Field{bit = 4},
        spare = Field{bit = 4},
        e_utran_cell_identifier = Field{bit = 28},
    ]
}

packet UliLai {
    header = [
        mcc2 = Field{bit = 4},
        mcc1 = Field{bit = 4},
        mnc3 = Field{bit = 4},
        mcc3 = Field{bit = 4},
        mnc2 = Field{bit = 4},
        mnc1 = Field{bit = 4},        
        local_area_code = Field{bit = 16}
    ]
}

packet UliMacroEnodebIdField {
    header = [
        mcc2 = Field{bit = 4},
        mcc1 = Field{bit = 4},
        mnc3 = Field{bit = 4},
        mcc3 = Field{bit = 4},
        mnc2 = Field{bit = 4},
        mnc1 = Field{bit = 4},
        spare = Field{bit = 4},
        macro_enodeb_id = Field{bit = 20},        
    ]
}

packet UliExtendedMacroEnodebIdField {
    header = [
        mcc2 = Field{bit = 4},
        mcc1 = Field{bit = 4},
        mnc3 = Field{bit = 4},
        mcc3 = Field{bit = 4},
        mnc2 = Field{bit = 4},
        mnc1 = Field{bit = 4},
        sm_enb = Field{bit = 1},
        spare = Field{bit = 2},
        macro_enodeb_id = Field{bit = 21},        
    ]
}

// fully qualified tunnel endpoint identifier 87
packet FullyQualifiedTeidIE {
    header = [
        type_ = Field{bit = 8, default=@87},
        len = Field{bit = 16, default = 5, gen = false},
        cr_flag = Field{bit = 4},
        instance = Field{bit = 4},
        v4 = Field{bit = 1, arg = bool},
        v6 = Field{bit = 1, arg = bool},
        interface_type = Field{bit = 6},
        teid_gre_key = Field{bit = 32},
    ],
    length = [
        header_len = len + 4
    ],
    cond = (type_==87)
}

// bearer context 93
packet BearerContextIE {
    header = [
        type_ = Field{bit = 8, default=@93},
        len = Field{bit = 16, default = 0, gen = false},
        cr_flag = Field{bit = 4},
        instance = Field{bit = 4},
    ],
    length = [
        header_len = len + 4
    ],
    cond = (type_==93)
}

// ue time zone 114
packet UeTimeZoneIE {
    header = [
        type_ = Field{bit = 8, default=@114},
        len = Field{bit = 16, default = @2},
        cr_flag = Field{bit = 4},
        instance = Field{bit = 4},
        time_zone = Field{bit = 8},
        spare = Field{bit = 6},
        daylight_saving_time = Field{bit = 2},
    ],
    cond = (type_==114)
}

group Gtpv2IEGroup = {
    members = [
        UserLocationInfoIE,
        InternationalMobileSubscriberIdIE,
        ServingNetworkIE,
        RatTypeIE,
        FullyQualifiedTeidIE,
        AggregateMaxBitRateIE,
        MobileEquipmentIdIE,
        UeTimeZoneIE,
        BearerContextIE,
        EpsBearerIdIE,
        RecoveryIE,
    ],
    enable_iter = true,
}