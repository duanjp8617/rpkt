%%
#![allow(missing_docs)]
#![allow(unused_parens)]

use crate::cursors::*;
use crate::endian::{read_uint_from_be_bytes, write_uint_as_be_bytes};
use crate::traits::*;
%%

// Defined according to TS 129 274.
packet Gtpv2 {
    header = [
        version = Field{bit = 3, default=@2},
        piggybacking_flag = Field{bit = 1, arg = bool},
        teid_present = Field{bit = 1, arg = bool},
        spare=Field{bit = 3},
        message_type = Field{bit = 8},
        message_len = Field{bit = 16, default=4, gen=false},
    ],
    length = [
        header_len=,
        packet_len = message_len + 4
    ]
}

%%
impl<T: Buf> Gtpv2<T> {
    /// A customized `header_len` function.
    /// The header length of Gtpv1 protocol is either 8 or 12 bytes, depending
    /// on the values of the sequence_present, extention_header_present and npdu_present
    /// flag bits.
    #[inline]
    pub fn header_len(&self) -> usize {
        if self.teid_present() {
            12
        } else {
            8
        }
    }

    /// Return the teid value.
    ///
    /// # Panics
    /// This function panics if `self.teid_present()` is false.
    #[inline]
    pub fn teid(&self) -> u32 {
        assert!(self.teid_present());
        u32::from_be_bytes(self.buf.chunk()[4..8].try_into().unwrap())
    }

    /// Return the sequence number.
    #[inline]
    pub fn seq_number(&self) -> u32 {
        if self.teid_present() {
            read_uint_from_be_bytes(&self.buf.chunk()[8..11]) as u32
        } else {
            read_uint_from_be_bytes(&self.buf.chunk()[4..7]) as u32
        }
    }
}

impl<T: PktBufMut> Gtpv2<T> {
    /// Set the teid value.
    ///
    /// # Panics
    /// This function panics if `self.teid_present()` is false.
    #[inline]
    pub fn set_teid(&mut self, value: u32) {
        assert!(self.teid_present());
        self.buf.chunk_mut()[4..8].copy_from_slice(&value.to_be_bytes());
    }

    /// Set the npdu value.
    ///
    /// # Panics
    /// This function panics if `self.sequence_present()`, `self.extention_header_present()`
    /// and `self.npdu_present()` are all false.
    #[inline]
    pub fn set_seq_number(&mut self, value: u32) {
        assert!(value < (1 << 24));
        if self.teid_present() {
            write_uint_as_be_bytes(&mut self.buf.chunk_mut()[8..11], value as u64);
        } else {
            write_uint_as_be_bytes(&mut self.buf.chunk_mut()[4..7], value as u64);
        }
    }
}
%%